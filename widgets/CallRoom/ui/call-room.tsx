"use client"

import {
	ConnectionStateToast,
	ControlBar,
	DisconnectButton,
	LiveKitRoom,
	RoomAudioRenderer,
	useTracks,
	VideoConference,
} from "@livekit/components-react"
import "@livekit/components-styles"
import { DisconnectReason, Track } from "livekit-client"
import { FC, useState } from "react"

interface CallRoomProps {
	isOpen: boolean
	callType: "audio" | "video"
	callToken: string
	roomName: string
	isCallActive: boolean
	endCall: () => void
}

export const CallRoom: FC<CallRoomProps> = ({
	isOpen,
	callType,
	callToken,
	roomName,
	isCallActive,
	endCall,
}) => {
	const [connectionError, setConnectionError] = useState<string | null>(null)
	const [preJoinComplete, setPreJoinComplete] = useState(false)
	const [mediaError, setMediaError] = useState<string | null>(null)

	if (!isOpen || !isCallActive || !callToken || !roomName) {
		return null
	}

	const serverUrl = process.env.NEXT_PUBLIC_LIVEKIT_URL || ""

	if (!serverUrl) {
		return (
			<div className="fixed inset-0 z-50 bg-black flex items-center justify-center">
				<div className="text-white text-center">
					<h2 className="text-2xl mb-4">–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h2>
					<p className="mb-4">LiveKit URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</p>
					<button
						onClick={endCall}
						className="bg-red-500 hover:bg-red-600 text-white px-6 py-2 rounded"
					>
						–ó–∞–∫—Ä—ã—Ç—å
					</button>
				</div>
			</div>
		)
	}

	const handleDisconnected = (reason?: DisconnectReason) => {
		console.log("Disconnected:", reason)
		if (reason && reason !== DisconnectReason.CLIENT_INITIATED) {
			setConnectionError(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: ${reason}`)
		}
		endCall()
	}

	// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
	const requestMediaPermissions = async () => {
		try {
			const constraints = {
				audio: true,
				video: callType === "video",
			}

			const stream = await navigator.mediaDevices.getUserMedia(constraints)
			// –°—Ä–∞–∑—É –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
			stream.getTracks().forEach(track => track.stop())
			setPreJoinComplete(true)
			setMediaError(null)
		} catch (error: unknown) {
			// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∑–∞–º–µ–Ω–∏–ª–∏ any –Ω–∞ unknown
			console.error("Media permission error:", error)
			const err = error as { name?: string; message?: string }
			if (err.name === "NotAllowedError") {
				setMediaError(
					"–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∏ –∫–∞–º–µ—Ä–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞"
				)
			} else if (err.name === "NotFoundError") {
				setMediaError("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∏–ª–∏ –∫–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
			} else if (err.name === "NotReadableError") {
				setMediaError("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∏–ª–∏ –∫–∞–º–µ—Ä–∞ –∑–∞–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
			} else {
				setMediaError(
					`–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞: ${err.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`
				)
			}
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
	if (mediaError) {
		return (
			<div className="fixed inset-0 z-50 bg-black flex items-center justify-center">
				<div className="text-white text-center max-w-md">
					<h2 className="text-2xl mb-4">–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –º–µ–¥–∏–∞</h2>
					<p className="mb-4 text-red-400">{mediaError}</p>
					<div className="space-x-4">
						<button
							onClick={requestMediaPermissions}
							className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded"
						>
							–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
						</button>
						<button
							onClick={endCall}
							className="bg-red-500 hover:bg-red-600 text-white px-6 py-2 rounded"
						>
							–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
						</button>
					</div>
				</div>
			</div>
		)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	if (connectionError) {
		return (
			<div className="fixed inset-0 z-50 bg-black flex items-center justify-center">
				<div className="text-white text-center max-w-md">
					<h2 className="text-2xl mb-4">–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h2>
					<p className="mb-4 text-red-400">{connectionError}</p>
					<div className="space-x-4">
						<button
							onClick={() => {
								setConnectionError(null)
								setPreJoinComplete(false)
							}}
							className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded"
						>
							–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
						</button>
						<button
							onClick={endCall}
							className="bg-red-500 hover:bg-red-600 text-white px-6 py-2 rounded"
						>
							–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
						</button>
					</div>
				</div>
			</div>
		)
	}

	// –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–ø—Ä–æ—Å–∞
	if (!preJoinComplete) {
		return (
			<div className="fixed inset-0 z-50 bg-black flex items-center justify-center">
				<div className="text-white text-center">
					<h2 className="text-2xl mb-4">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–≤–æ–Ω–∫—É</h2>
					<p className="mb-6">
						–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
						{callType === "video" ? " –∏ –∫–∞–º–µ—Ä–µ" : ""}
					</p>
					<div className="space-x-4">
						<button
							onClick={requestMediaPermissions}
							className="bg-green-500 hover:bg-green-600 text-white px-8 py-3 rounded-full"
						>
							–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø
						</button>
						<button
							onClick={endCall}
							className="bg-red-500 hover:bg-red-600 text-white px-8 py-3 rounded-full"
						>
							–û—Ç–º–µ–Ω–∞
						</button>
					</div>
				</div>
			</div>
		)
	}

	return (
		<div className="fixed inset-0 z-50 bg-black">
			<LiveKitRoom
				video={callType === "video"}
				audio={true}
				token={callToken}
				serverUrl={serverUrl}
				data-lk-theme="default"
				style={{ height: "100vh" }}
				onDisconnected={handleDisconnected}
				options={{
					publishDefaults: {
						simulcast: false,
						videoSimulcastLayers: [],
					},
					adaptiveStream: false,
					dynacast: false,
				}}
			>
				<CallInterface callType={callType} onEndCall={endCall} />
				<RoomAudioRenderer />
				<ConnectionStateToast />
			</LiveKitRoom>
		</div>
	)
}

interface CallInterfaceProps {
	callType: "audio" | "video"
	onEndCall: () => void
}

const CallInterface: FC<CallInterfaceProps> = ({ callType, onEndCall }) => {
	const tracks = useTracks(
		[
			{ source: Track.Source.Camera, withPlaceholder: true },
			{ source: Track.Source.Microphone, withPlaceholder: false },
		],
		{ onlySubscribed: false }
	)

	if (callType === "video") {
		return (
			<div className="h-full flex flex-col">
				<div className="flex-1">
					<VideoConference />
				</div>
				<div className="p-4">
					<ControlBar
						controls={{
							microphone: true,
							camera: true,
							screenShare: false,
							chat: false,
						}}
					/>
					<div className="flex justify-center mt-4">
						<DisconnectButton className="bg-red-500 hover:bg-red-600 text-white px-6 py-2 rounded-full">
							–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
						</DisconnectButton>
					</div>
				</div>
			</div>
		)
	}

	// –ê—É–¥–∏–æ –∑–≤–æ–Ω–æ–∫ - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ identity –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
	const uniqueParticipants = tracks.reduce((acc, track) => {
		const participantId = track.participant.identity
		if (!acc[participantId]) {
			acc[participantId] = track.participant
		}
		return acc
	}, {} as Record<string, (typeof tracks)[0]["participant"]>)

	return (
		<div className="h-full flex flex-col items-center justify-center bg-gradient-to-br from-blue-900 to-purple-900">
			<div className="text-center text-white mb-8">
				<h2 className="text-2xl font-semibold mb-4">–ì–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫</h2>

				<div className="grid gap-8">
					{Object.entries(uniqueParticipants).map(
						([participantId, participant]) => (
							<div
								key={participantId} // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º participantId –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
								className="flex flex-col items-center"
							>
								<div className="w-24 h-24 rounded-full bg-gray-600 flex items-center justify-center mb-4">
									<span className="text-2xl font-semibold">
										{participant.name?.charAt(0).toUpperCase()}
									</span>
								</div>

								<div className="text-lg font-medium mb-2">
									{participant.name}
								</div>

								{/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å mute –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ */}
								<div className="text-sm opacity-75">
									{participant.isMicrophoneEnabled ? "üé§" : "üîá"}
								</div>
							</div>
						)
					)}
				</div>
			</div>

			<div className="space-y-4">
				<ControlBar
					controls={{
						microphone: true,
						camera: false,
						screenShare: false,
						chat: false,
					}}
				/>

				<div className="flex justify-center">
					<DisconnectButton
						className="bg-red-500 hover:bg-red-600 text-white px-8 py-3 rounded-full font-medium"
						onClick={onEndCall}
					>
						–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
					</DisconnectButton>
				</div>
			</div>
		</div>
	)
}
